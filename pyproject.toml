[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ecommerce-purchase-intent-mlops"
version = "0.1.0"
description = "End-to-end MLOps project for predicting e-commerce purchase intent"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Mohit Sharma", email = "sharmamohit85627@gmail.com"},
]
maintainers = [
    {name = "Mohit Sharma", email = "sharmamohit85627@gmail.com"},
]
keywords = ["mlops", "machine-learning", "ecommerce", "purchase-intent", "python"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "lightgbm>=4.0.0",
    "mlflow>=2.8.0",
    "optuna>=3.4.0",
    "feast>=0.34.0",
    "great-expectations>=0.18.0",
    "evidently>=0.4.0",
    "prefect>=2.14.0",
    "fastapi>=0.104.0",
    "pydantic>=2.5.0",
    "click>=8.1.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "ipdb>=0.13.0",
]
docs = [
    "sphinx>=7.2.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]
serving = [
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    "redis>=5.0.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "evidently>=0.4.0",
    "grafana-api>=1.0.3",
]
notebooks = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
]

[project.urls]
"Homepage" = "https://github.com/pazs10ve/ecommerce-purchase-intent-mlops"
"Source" = "https://github.com/pazs10ve/ecommerce-purchase-intent-mlops"

[project.scripts]
train-model = "scripts.train_model:main"
evaluate-model = "scripts.evaluate_model:main"
serve-model = "scripts.serve_model:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "xgboost.*",
    "lightgbm.*",
    "optuna.*",
    "mlflow.*",
    "feast.*",
    "evidently.*",
    "great_expectations.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]